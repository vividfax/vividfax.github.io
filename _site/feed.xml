<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-11T14:33:39+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rianna @vividfax</title><subtitle>Hi there, I&apos;m Rianna. Front-end developer, Generative artist, Knitter</subtitle><entry><title type="html">Assign a material to an object in Blender with Python</title><link href="http://localhost:4000/2021/01/14/blender-materials.html" rel="alternate" type="text/html" title="Assign a material to an object in Blender with Python" /><published>2021-01-14T00:00:00+00:00</published><updated>2021-01-14T00:00:00+00:00</updated><id>http://localhost:4000/2021/01/14/blender-materials</id><content type="html" xml:base="http://localhost:4000/2021/01/14/blender-materials.html"><![CDATA[<div class="col-12 offset-sm-0 col-md-8 offset-md-2 col-lg-6 offset-lg-3 vertical-center">

  <h4 id="assign-a-material-to-an-object-in-blender-using-python">Assign a material to an object in Blender using Python</h4>
  <p>14 January 2021</p>

  <p><br /></p>

  <p>This is how to create a new material, add a shader, create a new object and assign the material to the object in Blender using Python.</p>

  <p>First, create a new material. The function takes a string as the name for the new material.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import bpy

def newMaterial(id):

    mat = bpy.data.materials.get(id)

    if mat is None:
        mat = bpy.data.materials.new(name=id)

    mat.use_nodes = True

    if mat.node_tree:
        mat.node_tree.links.clear()
        mat.node_tree.nodes.clear()

    return mat
</code></pre></div>  </div>

  <p>Then add a shader to the material. Input the type of shader (i.e. diffuse, emission, glossy) and the rgb colour.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def newShader(id, type, r, g, b):

    mat = newMaterial(id)

    nodes = mat.node_tree.nodes
    links = mat.node_tree.links
    output = nodes.new(type='ShaderNodeOutputMaterial')

    if type == "diffuse":
        shader = nodes.new(type='ShaderNodeBsdfDiffuse')
        nodes["Diffuse BSDF"].inputs[0].default_value = (r, g, b, 1)

    elif type == "emission":
        shader = nodes.new(type='ShaderNodeEmission')
        nodes["Emission"].inputs[0].default_value = (r, g, b, 1)
        nodes["Emission"].inputs[1].default_value = 1

    elif type == "glossy":
        shader = nodes.new(type='ShaderNodeBsdfGlossy')
        nodes["Glossy BSDF"].inputs[0].default_value = (r, g, b, 1)
        nodes["Glossy BSDF"].inputs[1].default_value = 0

    links.new(shader.outputs[0], output.inputs[0])

    return mat
</code></pre></div>  </div>

  <p>Then create the object, assign the material and call the function.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def drawObject():

    mat = newShader("Shader1", "diffuse", 1, 1, 1)
    bpy.ops.mesh.primitive_cube_add(size=2, align='WORLD', location=(0, 0, 0))
    bpy.context.active_object.data.materials.append(mat)

drawObject()
</code></pre></div>  </div>
</div>]]></content><author><name></name></author></entry><entry><title type="html">Manage a bot’s source code across Github and Heroku</title><link href="http://localhost:4000/2020/08/23/github-and-heroku.html" rel="alternate" type="text/html" title="Manage a bot’s source code across Github and Heroku" /><published>2020-08-23T00:00:00+01:00</published><updated>2020-08-23T00:00:00+01:00</updated><id>http://localhost:4000/2020/08/23/github-and-heroku</id><content type="html" xml:base="http://localhost:4000/2020/08/23/github-and-heroku.html"><![CDATA[<div class="col-12 offset-sm-0 col-md-8 offset-md-2 col-lg-6 offset-lg-3 vertical-center">

  <h4 id="manage-a-bots-source-code-across-github-and-heroku">Manage a bot’s source code across Github and Heroku</h4>
  <p>23 August 2020</p>

  <p><br /></p>

  <p>This is a guide to managing a bot’s source code across GitHub and Heroku. I use this process for my twitter bots (like <a href="https://twitter.com/blackletterwalk">Blackletter Walk</a>) where <a href="https://github.com/vividfax/blackletter-walk">the source code is publicly available on GitHub</a>, and the bot lives on a posts from Heroku. One major difference between the source code on GitHub and the source code on Heroku is that the Heroku config file contains the twitter API keys, whereas on Github <a href="https://github.com/vividfax/blackletter-walk/blob/master/config.js">the config file is an empty template</a>.</p>

  <p>First create a GitHub repository, initialise git inside the local directory, and push the source code to Github.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init
$ git commit -am "Init"
$ git remote add origin https://github.com/username/repo_name.git
$ git push -u origin master
</code></pre></div>  </div>

  <p>Then create a new branch with the name ‘heroku’, and add your config keys to your bot in the <a href="https://github.com/vividfax/blackletter-walk/blob/master/config.js">config.js</a> file.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout -b heroku
$ git commit -am "Add API keys"
</code></pre></div>  </div>

  <p>Then create a new Heroku app and push the new heroku branch to Heroku.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ heroku git:remote -a app_name
$ git push heroku heroku:master
</code></pre></div>  </div>

  <p>Whenever I refactor or change the bot’s source code I work on the master branch and then merge the changes into the Heroku branch. I first make my changes on the master branch, commit them, and push them to GitHub. I then switch into the heroku branch, merge in the changes, and push to Heroku. Then I switch back into the master branch if I want to continue working on it.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -am "Refactor"
$ git push origin master
$ git checkout heroku
$ git merge master
$ git push heroku heroku:master
</code></pre></div>  </div>

</div>]]></content><author><name></name></author></entry><entry><title type="html">Find the top n closest matches from a list</title><link href="http://localhost:4000/2020/08/17/closest-matches.html" rel="alternate" type="text/html" title="Find the top n closest matches from a list" /><published>2020-08-17T00:00:00+01:00</published><updated>2020-08-17T00:00:00+01:00</updated><id>http://localhost:4000/2020/08/17/closest-matches</id><content type="html" xml:base="http://localhost:4000/2020/08/17/closest-matches.html"><![CDATA[<div class="col-12 offset-sm-0 col-md-8 offset-md-2 col-lg-6 offset-lg-3 vertical-center">

  <h4 id="find-the-top-n-closest-matches-from-a-list">Find the top n closest matches from a list</h4>
  <p>17 August 2020</p>

  <p><br /></p>

  <p>For <a href="https://vividfax.github.io/wayfinder/">Wayfinder</a> I needed to display the top 3 yarn matches for the color chosen by the user using a color picker. To do this I would need to run through my entire list of yarns and select the top 3 matches in descending order.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const maxDistance = 765;
let distances = [];

const numberOfMatches = 3;
let matches = [];

for (let i = 0; i &lt; numberOfMatches; i++) {

    matches.push(maxDistance);
    distances.push('');
}
</code></pre></div>  </div>

  <p>In this case, the maximum <a href="/2020/08/16/color-distance.html">distance between the chosen color and any yarn option</a> is 765 (255*3). A lower number indicates a closer match. I’ve chosen the number of matches I want as 3.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function getMatches(colorPicker, data, numberOfMatches) {

    for (let i = 0; i &lt; data.length; i++) {

        let distance = colorDistance(colorPicker.color, data[i].color);

        for (let j = 0; j &lt; numberOfMatches; j++) {

            if (distance &lt; distances[j]) {

                for (let k = numberOfMatches - 1; k &gt; j; k--) {

                    distances[k] = distances[k - 1];
                    matches[k] = matches[k - 1];
                }
                distances[j] = distance;
                matches[j] = data[i];

                break;
            }
        }
    }
}
</code></pre></div>  </div>

  <p>First, iterate through the list of options, and for each, <a href="/2020/08/16/color-distance.html">calculate the distance between the color picker’s color value and the selected yarn’s color</a>. Then iterate through the list of matches, and if the current option is closer than the current match, bump the current match down the list of matches and save the current option as a match.</p>

  <p>This gives an array of n matches in descending order.</p>

</div>]]></content><author><name></name></author></entry><entry><title type="html">Calculate the distance between two colors in p5.js</title><link href="http://localhost:4000/2020/08/16/color-distance.html" rel="alternate" type="text/html" title="Calculate the distance between two colors in p5.js" /><published>2020-08-16T00:00:00+01:00</published><updated>2020-08-16T00:00:00+01:00</updated><id>http://localhost:4000/2020/08/16/color-distance</id><content type="html" xml:base="http://localhost:4000/2020/08/16/color-distance.html"><![CDATA[<div class="col-12 offset-sm-0 col-md-8 offset-md-2 col-lg-6 offset-lg-3 vertical-center">

  <h4 id="calculate-the-distance-between-two-colors-in-p5js">Calculate the distance between two colors in p5.js</h4>
  <p>16 August 2020</p>

  <p><br /></p>

  <p>In building <a href="https://vividfax.github.io/wayfinder/">Wayfinder</a> I needed to calculate the distance between two colors in order to find the closest color match.</p>

  <p>The function takes two <a href="https://p5js.org/reference/#/p5/color">color object</a> as inputs, and gives a number between 0 and 765, where a lower number indicates a closer match.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let black = color('#000');
let white = color('#fff');

let distance = colorDistance(black, white);

function colorDistance(first, second) {

    let r = abs(red(first) - red(second));
    let g = abs(green(first) - green(second));
    let b = abs(blue(first) - blue(second));

    return r + g + b;
}
</code></pre></div>  </div>

  <p><a href="https://p5js.org/reference/#/p5/abs">abs()</a> gives the absolute value of a number; turning any negative numbers into positives.</p>

</div>]]></content><author><name></name></author></entry></feed>